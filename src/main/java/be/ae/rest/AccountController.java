/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.ae.rest;

import be.ae.rest.model.Account;
import be.ae.rest.model.ErrorResource;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.NativeWebRequest;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-09-18T19:21:46.135547+02:00[Europe/Brussels]")

@Validated
@Api(value = "accounts", description = "the accounts API")
@RequestMapping(value = "/api")
@Controller
public class AccountController {

    @ApiOperation(value = "Get list of accounts", nickname = "getAccounts", notes = "", response = Object.class, responseContainer = "List", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful request", response = Object.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Nothing found for your request", response = ErrorResource.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorResource.class) })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" },
        method = RequestMethod.GET)
    public ResponseEntity<List<Account>> getAccounts() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @ApiOperation(value = "", nickname = "getAccountById", notes = "Retrieve account details", response = Account.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful request", response = Account.class),
        @ApiResponse(code = 404, message = "Nothing found for your request", response = ErrorResource.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorResource.class) })
    @RequestMapping(value = "/accounts/{accountId}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    public ResponseEntity<Account> getAccountById(
        @ApiParam(value = "The id of the account", required = true) @PathVariable("accountId") String accountId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @ApiOperation(value = "Create new account", nickname = "createAccount", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Object craeted successfully"),
        @ApiResponse(code = 400, message = "Bad request. The provided input does not comply to the contract.", response = ErrorResource.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorResource.class) })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    public ResponseEntity<Void> createAccount(@ApiParam(value = "") @Valid @RequestBody Account account) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    @ApiOperation(value = "", nickname = "deleteAccountById", notes = "Delete account", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "Account deleted"),
        @ApiResponse(code = 404, message = "Nothing found for your request", response = ErrorResource.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorResource.class) })
    @RequestMapping(value = "/accounts/{accountId}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    public ResponseEntity<Void> deleteAccountById(
        @ApiParam(value = "The id of the account", required = true) @PathVariable("accountId") String accountId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
